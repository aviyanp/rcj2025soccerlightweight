#include <Arduino.h>

// Pin definitions
// Define IR sensor pins (analog input)
#define NUM_SENSORS 12
const int IR_PINS[NUM_SENSORS] = {A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11};

// Define IMU pins (use appropriate pins for your IMU module)
#define IMU_SDA_PIN 18
#define IMU_SCL_PIN 19

// Define motor control pins for DRV8874 motor driver (PWM and DIR for each motor)
const int MOTOR1_PWM = 2; // Front-left motor
const int MOTOR1_DIR = 3;
const int MOTOR2_PWM = 4; // Front-right motor
const int MOTOR2_DIR = 5;
const int MOTOR3_PWM = 6; // Back-right motor
const int MOTOR3_DIR = 7;
const int MOTOR4_PWM = 8; // Back-left motor
const int MOTOR4_DIR = 9;

// Variables for IMU and initial position tracking
float initialYaw = 0.0;
float currentYaw = 0.0;

// Variables for IR signal processing
int sensorValues[NUM_SENSORS];
int strongestSignalIndex = -1;
int strongestSignalValue = 0;

// Thresholds
const int STOP_THRESHOLD = 800;  // Threshold to stop before the ball (adjust as needed)
const int CLOSE_THRESHOLD = 700;  // Threshold to determine "very close" to the ball

// Function prototypes
void readIMU();
void moveTowardsBall();
void moveToSide();
void rotateToGoal();
void moveToGoal();
void pushBallOffCenter();
void reposition();

// Mock function for reading IMU yaw (replace with actual IMU logic)
float readYaw() {
    return 0.0;  // Replace this with actual yaw reading from your IMU
}

// Setup function
void setup() {
    Serial.begin(115200);

    // Initialize IR sensor pins
    for (int i = 0; i < NUM_SENSORS; i++) {
        pinMode(IR_PINS[i], INPUT);
    }

    // Initialize motor control pins
    pinMode(MOTOR1_PWM, OUTPUT);
    pinMode(MOTOR1_DIR, OUTPUT);
    pinMode(MOTOR2_PWM, OUTPUT);
    pinMode(MOTOR2_DIR, OUTPUT);
    pinMode(MOTOR3_PWM, OUTPUT);
    pinMode(MOTOR3_DIR, OUTPUT);
    pinMode(MOTOR4_PWM, OUTPUT);
    pinMode(MOTOR4_DIR, OUTPUT);

    // Initialize IMU (replace with actual initialization logic)
    pinMode(IMU_SDA_PIN, INPUT);
    pinMode(IMU_SCL_PIN, INPUT);

    // Register the initial position with the IMU
    initialYaw = readYaw();
    Serial.print("Initial Yaw: ");
    Serial.println(initialYaw);
}

// Main loop
void loop() {
    // Find the strongest IR signal
    for (int i = 0; i < NUM_SENSORS; i++) {
        sensorValues[i] = analogRead(IR_PINS[i]);
        if (sensorValues[i] > strongestSignalValue) {
            strongestSignalValue = sensorValues[i];
            strongestSignalIndex = i;
        }
    }

    // Move towards the ball
    moveTowardsBall();

    // Stop when close to the ball
    if (strongestSignalValue >= CLOSE_THRESHOLD) {
        delay(500);  // Pause briefly
        pushBallOffCenter();  // Push the ball slightly off-center
        reposition();  // Reposition the robot
        rotateToGoal();  // Rotate towards the goal
        moveToGoal();  // Move towards the goal with the ball
    }
}

// Function to move towards the ball
void moveTowardsBall() {
    if (strongestSignalValue >= STOP_THRESHOLD) {
        // Stop the motors
        analogWrite(MOTOR1_PWM, 0);
        analogWrite(MOTOR2_PWM, 0);
        analogWrite(MOTOR3_PWM, 0);
        analogWrite(MOTOR4_PWM, 0);
    } else {
        // Move towards the ball (strafe in the strongest signal direction)
        int speed = 200;  // Adjust speed as needed
        if (strongestSignalIndex < NUM_SENSORS / 2) {
            // Move left
            analogWrite(MOTOR1_PWM, speed);
            analogWrite(MOTOR2_PWM, speed);
            digitalWrite(MOTOR1_DIR, LOW);  // Reverse
            digitalWrite(MOTOR2_DIR, HIGH); // Forward
            analogWrite(MOTOR3_PWM, speed);
            analogWrite(MOTOR4_PWM, speed);
            digitalWrite(MOTOR3_DIR, HIGH); // Forward
            digitalWrite(MOTOR4_DIR, LOW);  // Reverse
        } else {
            // Move right
            analogWrite(MOTOR1_PWM, speed);
            analogWrite(MOTOR2_PWM, speed);
            digitalWrite(MOTOR1_DIR, HIGH); // Forward
            digitalWrite(MOTOR2_DIR, LOW);  // Reverse
            analogWrite(MOTOR3_PWM, speed);
            analogWrite(MOTOR4_PWM, speed);
            digitalWrite(MOTOR3_DIR, LOW);  // Reverse
            digitalWrite(MOTOR4_DIR, HIGH); // Forward
        }
    }
}

// Function to push the ball slightly off-center
void pushBallOffCenter() {
    int speed = 150;  // Adjust speed as needed
    analogWrite(MOTOR1_PWM, speed);
    analogWrite(MOTOR2_PWM, speed);
    analogWrite(MOTOR3_PWM, speed);
    analogWrite(MOTOR4_PWM, speed);

    digitalWrite(MOTOR1_DIR, HIGH); // Forward
    digitalWrite(MOTOR2_DIR, HIGH); // Forward
    digitalWrite(MOTOR3_DIR, HIGH); // Forward
    digitalWrite(MOTOR4_DIR, HIGH); // Forward

    delay(1000);  // Push for 1 second (adjust as needed)
    analogWrite(MOTOR1_PWM, 0);
    analogWrite(MOTOR2_PWM, 0);
    analogWrite(MOTOR3_PWM, 0);
    analogWrite(MOTOR4_PWM, 0);
}

// Function to reposition the robot
void reposition() {
    int speed = 150;  // Adjust speed as needed
    analogWrite(MOTOR1_PWM, speed);
    analogWrite(MOTOR2_PWM, speed);
    analogWrite(MOTOR3_PWM, speed);
    analogWrite(MOTOR4_PWM, speed);

    digitalWrite(MOTOR1_DIR, LOW);  // Reverse
    digitalWrite(MOTOR2_DIR, LOW);  // Reverse
    digitalWrite(MOTOR3_DIR, LOW);  // Reverse
    digitalWrite(MOTOR4_DIR, LOW);  // Reverse

    delay(1000);  // Move back for 1 second (adjust as needed)
    analogWrite(MOTOR1_PWM, 0);
    analogWrite(MOTOR2_PWM, 0);
    analogWrite(MOTOR3_PWM, 0);
    analogWrite(MOTOR4_PWM, 0);
}

// Function to rotate towards the goal
void rotateToGoal() {
    currentYaw = readYaw();
    while (abs(currentYaw - initialYaw) > 5) {  // Adjust tolerance as needed
        analogWrite(MOTOR1_PWM, 150);
        analogWrite(MOTOR2_PWM, 150);
        analogWrite(MOTOR3_PWM, 150);
        analogWrite(MOTOR4_PWM, 150);
        digitalWrite(MOTOR1_DIR, LOW);  // Rotate left
        digitalWrite(MOTOR2_DIR, HIGH); // Rotate right
        digitalWrite(MOTOR3_DIR, LOW);  // Rotate left
        digitalWrite(MOTOR4_DIR, HIGH); // Rotate right
        currentYaw = readYaw();
    }
    analogWrite(MOTOR1_PWM, 0);
    analogWrite(MOTOR2_PWM, 0);
    analogWrite(MOTOR3_PWM, 0);
    analogWrite(MOTOR4_PWM, 0);
}

// Function to move towards the goal
void moveToGoal() {
    analogWrite(MOTOR1_PWM, 200);
    analogWrite(MOTOR2_PWM, 200);
    analogWrite(MOTOR3_PWM, 200);
    analogWrite(MOTOR4_PWM, 200);
    digitalWrite(MOTOR1_DIR, HIGH); // Forward
    digitalWrite(MOTOR2_DIR, HIGH); // Forward
    digitalWrite(MOTOR3_DIR, HIGH); // Forward
    digitalWrite(MOTOR4_DIR, HIGH); // Forward
    delay(3000);  // Move for 3 seconds (adjust as needed)
    analogWrite(MOTOR1_PWM, 0);
    analogWrite(MOTOR2_PWM, 0);
    analogWrite(MOTOR3_PWM, 0);
    analogWrite(MOTOR4_PWM, 0);
}
